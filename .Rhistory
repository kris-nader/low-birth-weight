?tips
head(tips)
#compute average tip depending on day of the week
tapply(tips$tip, tips$day, mean)
#compute average tip depending on day of the week and time of the day
tapply(tips$tip, list(tips$day ,tips$time), mean)
#lapply on a list
# by using split we divide a vector into groups defined by a factor
# here we divide the total amount of the tip by day of the week
list_tip <- split(tips$tip, tips$day)
list_tip
lapply(list_tip, mean)
# for loop
# example 1
# count the number of reservations with even number of people
# use the variable size of tips data frame
# %% is modulo division in R
head(tips)
sum_even <- 0
for (val in tips$size) {
if(val %% 2 == 0)  sum_even = sum_even+1
}
sum_even
# example 2
# assume that we want to create a new variable which is the total of the bill and the tip
tips$total <- tips$total_bill + tips$tip
head(tips$total)
#another way
tips$total <- 0
for (i in 1: length(tips$total_bill) )
{
tips$total[i] <- tips$total_bill[i] + tips$tip[i]
}
head(tips)
#while loops
#example 1
i <- 1
while (i < 6) {
i = i+1
print(i)
}
# example 2
i <- 1
while (i < 6) {
i = i+1
if (i == 4) break
print(i)
}
# example 3
i <- 1
while (i < 6) {
i = i+1
if (i == 4) next
print(i)
}
# repeat loop
i <- 1
repeat {
print(i)
i = i+1
if (i == 6){
break
}
}
#check whether the total_bill and the tips size is sign different for males and females
#total_bill is col 1 of tips, tip is col 2 of tips
# col 3 is the gender variable
xtabs(~tips[,3])
var.test(tips[,1]~tips[,3])
var.test(tips[,2]~tips[,3])
t.test(tips[,1]~tips[,3], var.equal=T)
t.test(tips[,2]~tips[,3],var.equal=F)
pval_var <- rep(NA,2)
pval_t <- rep(NA,2)
for (i in 1:2) {
pval_var[i] <- var.test(tips[,i] ~ tips[,3])$p.value
if (pval_var[i]> 0.05)
{pval_t[i] <- t.test(tips[,i] ~ tips[,3], var.equal=T)$p.value}
else
{pval_t[i] <- t.test(tips[,i] ~ tips[,3], var.equal=F)$p.value}
}
pval_var
pval_t
summ <- data.frame(names(tips)[1:2], pval_var, pval_t)
summ
# function of moving averages
Fn <- function(vec)
{
x  <- rep(NA,length(vec)-2)
for (i in 3: length(vec))
{x[i] <- (vec[i-2] +vec[i-1]+vec[i])/3
print(x[i])}
}
z <- 1:6
Fn(z)
# function of moving averages
Fn <- function(vec)
{
for (i in 3: length(vec))
{x[i] <- (vec[i-2] +vec[i-1]+vec[i])/3
print(x[i])}
}
z <- 1:6
Fn(z)
# function of moving averages
Fn <- function(vec)
{
for (i in 3: length(vec))
{x[i] <- (vec[i-2] +vec[i-1]+vec[i])/3
print(x[i])}
}
z <- 1:6
Fn(z)
# function of moving averages
Fn <- function(vec)
{
x  <- rep(NA,length(vec)-2)
for (i in 3: length(vec))
{x[i] <- (vec[i-2] +vec[i-1]+vec[i])/3
print(x[i])}
}
z <- 1:6
Fn(z)
#step 1
rexp(30, rate=3)
#CLT
#generate a matrix with rows and columns
#each row is one sample. One sample consistss of 30 datapoints
#generate from an Exponential (3) distribution
?rexp
?matrix
#step 1
rexp(30, rate=3)
#step2
mat <- matrix(rep(0,150), nrow=5)
for (i in (1:5))
{
mat[i,] <- rexp(30, rate=3)
}
mat
#step 3
# compute the average for every sample
all.sample.means <- apply(mat,1,mean)
#step 4
# create a histogram with the original data for 1st row
#and another historgram with the averages
par(mfrow=c(1,2))
hist(mat[1,],col="blue",main="Distribution of One Sample")
hist(all.sample.means,col="green",main="Sampling Distribution of
the Mean", prob=T)
lines(density(all.sample.means))
#step 5
# create a function out of this
clt_fun <- function(rpt = 5, n=30)
{
mat <- matrix(rep(0,n*rpt), nrow=rpt)
for (i in (1:rpt))
{
mat[i,] <- rexp(n, rate=3)
}
# compute the average for every sample
all.sample.means <- apply(mat,1,mean)
# create a histogram with the original data for 1st row
#and another historgram with the averages
par(mfrow=c(1,2))
hist(mat[1,],col="blue",main="Distribution of One Sample")
hist(all.sample.means,col="green",main="Sampling Distribution of
the Mean", prob=T)
lines(density(all.sample.means))
}
#step 6
clt_fun(rpt=500,n=30)
#exercise on individual chart and moving range chart
#a. create total
library(qcc)
data(boiler)
names(boiler)
mr1 <- abs(diff(boiler$t1, lag=1))
mr <- c(NA, mr1)
time <- seq(1:25)
x <- boiler$t1
total <- cbind(time, x, mr)
head(total, n=6)
# B. compute averages for the base period
mean_per_col  <- apply(total[1:20,], 2, mean, na.rm=T)
mean_x <- mean_per_col[2]
mean_mr <- mean_per_col[3]
list(mean_x=mean_x, mean_mr = mean_mr)
#C. compute control limits
#for a moving range, the constants are
E2 <- 2.66
D3 <- 0
D4 <- 3.267
list(mean_x = mean_x, LCL_x <- mean_x - E2* mean_mr,
UCL_x <- mean_x + E2 * mean_mr)
list(mean_mr = mean_mr, LCL_mr <- mean_mr*D3,
UCL_mr <- mean_mr *D4)
# D make the control charts
par(mfrow=c(1,2))
#individual chart
plot(time, total[,2], type="b", ylim = c(505,545), main="Individual chart")
abline(h=c(mean_x,LCL_x, UCL_x), col=4, lwd=3)
#plot mr chart
plot(time, total[,3], type="b", ylim = c(0,22), main="Moving range chart")
abline(h=c(mean_mr,LCL_mr, UCL_mr), col=4, lwd=3)
#exercise on rolling mean
#step 1: generate sequency of data between 1 and 3 of total length 100
x <- seq( 1, 3, length = 100)
plot(x)
#use the jitter function to add  noise to your data
y <- jitter(x, factor=100)
plot(y)
#step 2: compute a vector roll.mean with averages of 5 consecutive points
consec <- 5
roll.mean <- rep(NA, 100)
for (i in (1:96)){roll.mean[i] <- mean(y[i: (i+consec-1)])
}
roll.mean
# step 3: add these averages to the plot
lines(roll.mean, col=3, lwd=2)
#step 4: generalise your step 3 and step 4
#create a function with parameters consec and y
rollmeanf <- function(y, consec) {
roll.mean <- rep(NA, 100)
for (i in (1:96)){roll.mean[i] <- mean(y[i: (i+consec-1)])
}
plot(y)
lines(roll.mean, col=3, lwd=2)
}
#step 5: apply this to rolling averages of size 10
rollmeanf(y,10)
# chapter 11: ggplot2
# load and install ggplot2
#install.packages("ggplot2")
library(ggplot2)
install.packages("GGally")
# import fish.txt data file
fish <- read.table(file=file.choose(), header=TRUE)
names(fish)
# a first example
ggplot(fish, aes(elv, log(hg))) + geom_point() + stat_smooth()
# section 2
pl1 <- ggplot(fish, aes(elv, log(hg), colour=factor(dam)))
pl1
# to create scatterplot
pl3 <- pl1 + geom_point()
pl3
# to create a histogram for continuous variable log(hg)
pl4 <- ggplot(fish, aes(log(hg))) + geom_histogram(bins=40,colour="black", fill="green")
pl4
#to create a bar chart for categorical variable lake type (lt)
pl4 <- ggplot(fish, aes(lt)) + geom_bar(colour="black", fill="green")
pl4
# create a boxplot
pl5 <- ggplot(fish, aes(x=factor(dam), y=log(hg))) + geom_boxplot(colour="black", fill="blue")
pl5
# create a scatterplot + line
ggplot(fish, aes(x=elv, y=log(hg)))+ geom_point(colour="blue") + geom_line(colour="black")
# create a smooth trend line
pl6 <-
ggplot(fish, aes(x=elv, y=log(hg)))+ geom_point(colour="blue") + geom_smooth(colour="black")
pl6
# create a regression line
### also includes a 95% confidence bound
pl7 <-
ggplot(fish, aes(x=elv, y=log(hg)))+ geom_point(colour="blue") + geom_smooth(colour="black", method="lm")
pl7
# in case you want to see the prediction interval instead of confidence interval
# Fit a linear model
m.lm <- lm(log(hg) ~ elv, data = fish)
# cbind the predictions to fish
fish.pred <- cbind(fish, predict(m.lm, interval = "prediction"))
names(fish.pred)
head(fish.pred)
#make now the plot
pl7a <- ggplot(fish.pred, aes(x=elv))+
geom_point(aes(y=log(hg)))+
geom_line(aes(y=fit), colour="blue", size=1)
pl7b <- pl7a + geom_ribbon(aes(ymin=lwr, ymax=upr), fill="blue", alpha=0.4)
pl7b
?geom_ribbon
### notes: manually create it
pred_fish <- cbind(elv=fish$elv, data.frame(predict(m.lm, interval="prediction")))
names(pred_fish)
pl7d <- ggplot()+ geom_point(data=fish, aes(x=elv, y=log(hg)))
pl7d
# add now the fitted values based on pred_fish data frame
pl7e <- pl7d + geom_line(data=pred_fish, aes(x=elv, y=fit), colour="blue", size=1)
pl7e
# add now the prediction limits based on pred_fish data frame
# alpha expresses the density of the ribbon
pl7f <- pl7e + geom_ribbon(data=pred_fish, aes(x=elv, ymin=lwr, ymax=upr),
fill="blue", alpha=0.4)
pl7f
ggplot(fish, aes(x=elv, y=log(hg)))+ geom_point(colour="blue") +
geom_smooth(colour="black", formula=y ~ x +I(x^2),method="lm")
# stats
#create a smooth line
ggplot(fish, aes(elv, log(hg))) + geom_point() + stat_smooth()
#create regression line
ggplot(fish, aes(elv, log(hg))) + geom_point() +  stat_smooth(method="lm")
# add boxplot
pl8 <-  ggplot(fish, aes(x=factor(dam), y=log(hg)))  + geom_point(colour="black")+stat_boxplot(colour="black", fill="blue")
pl8
#faceting with facet_grid
### similar to subplotting in matlab
fac1 <- ggplot(fish, aes( elv, log(hg))) + geom_point() +
geom_smooth(colour="red", method="lm")
fac1
fac2 <- fac1 + facet_grid(.~dam)+ labs(title=".~dam")
fac2
fac3 <-  fac1 + facet_grid(lt~.)+ labs(title="lt~.")
fac3
fac4 <-  fac1 + facet_grid(lt~dam)+ labs(title="lt~dam")
fac4
fac5 <-  fac1 + facet_grid(lt~dam, margins=T)+ labs(title="lt~dam, margins=T")
fac5
#faceting with facet_wrap
fac1 <- ggplot(fish, aes( elv, log(hg))) + geom_point() +
geom_smooth(colour="red", method="lm")
fac1
fac2 <- fac1 + facet_wrap(~lt+dam )+ labs(title="facet_wrap")
fac2
# comparing with grouping
# add regression line
ggplot(fish, aes(elv, log(hg),colour=factor(dam),shape=factor(lt))) +  geom_point(size=3) + geom_smooth(method="lm", se=F)
#color points by values of  continuous variable
ggplot(fish, aes(elv, log(hg),colour=z)) +  geom_point() + geom_smooth(method="lm", se=F)
# faceting by continuous variable
# convert the continuous variable into a variable with discrete categories
fish$z_cat1 <- cut_interval(fish$z, n=3)
fish$z_cat2 <- cut_number(fish$z, n=3)
xtabs(~fish$z_cat1)
xtabs(~fish$z_cat2)
# we now can use this variable for faceting
fac1 <- ggplot(fish, aes( elv, log(hg))) + geom_point() +
geom_smooth(colour="red", method="lm")
fac1
fac2 <- fac1 + facet_wrap(~z_cat1 )+ labs(title="by z_cat1")
fac2
fac3 <- fac1 + facet_wrap(~z_cat2 )+ labs(title="by z_cat2")
fac3
#section 4
# use of theme
previous_theme <- theme_set(theme_grey())
th1 <- ggplot(fish, aes( elv, log(hg))) + geom_point() +
geom_smooth(colour="red", method="lm")
th1
# you override the theme for a single plot
th2 <- th1 + theme_bw()
th2
# affecting all plots
previous_theme <- theme_set(theme_bw())
th1
#install.packages("grid")
library(grid)
grid.newpage()
pushViewport(viewport(layout=grid.layout(1,2)))
vplayout <- function(x,y)
viewport(layout.pos.row=x, layout.pos.col=y)
print(th1, vp=vplayout(1,1))
print(th2, vp=vplayout(1,2))
#multiple plots on the same page
# first create the plots and assign them to objects
plot1 <- ggplot(fish, aes(elv,log(hg))) +geom_point()
plot2 <- ggplot(fish, aes(log(hg))) +geom_histogram(binwidth=0.1,
colour=I("red"), fill=I("red") )
plot3 <- ggplot(fish, aes(factor(lt),log(hg))) +geom_boxplot(colour=I("blue"), fill=I("blue") )
plot1
plot2
plot3
# a viewport that takes up the entire plot device
vp1 <- viewport(width=1, height=1, x=0.5, y=0.5)
# a viewport that takes up half the width and half the height
#it is located in the middle of the plot
vp2 <- viewport(width=0.5, height=0.5, x=0.5, y=0.5)
# a viewport located in the top right
vp3 <- viewport(x=0.9, y=0.9, height=0.8, width=0.8)
# a viewport in the bottom right
vp4 <- viewport(x=0.8, y=0.3, height=0.4, width=0.4 )
# we want to make a plot with a smaller subplot
plot1
print(plot2, vp=vp3)
print(plot2, vp=vp1)
# we want to make a plot with a smaller subplot
plot1
print(plot3, vp=vp4)
#use grid.layout()
grid.newpage()
pushViewport(viewport(layout=grid.layout(2,2)))
vplayout <- function(x,y)
viewport(layout.pos.row=x, layout.pos.col=y)
print(plot1, vp=vplayout(1,1:2))
print(plot2, vp=vplayout(2,1))
print(plot3, vp=vplayout(2,2))
### Applications
# visualise longitudinal data
# install.packages("nlme")
library(nlme)
?Oxboys
pl1 <- ggplot(Oxboys, aes(age, height, group=Subject))
pl2 <- pl1+ geom_line()
pl2
# adding a smoothed line for each boy
pl3 <- pl2 + geom_smooth(method="lm", size=1.2) + labs(title="smoothed line for
every boy")
pl3
# adding a smooth line based on ages and heights of all the boys
# specifying group=1 indicates that you want a single line (and consider all data
#points as 1 group)
pl4 <- pl2 + geom_smooth(aes(group=1), method="lm", size=2) +
labs(title="individual profile + common trend ")
pl4
pl1 <- ggplot(Oxboys, aes(Occasion, height))
pl2 <- pl1+geom_boxplot(colour="blue")
pl2
#if you want to connect the values per boy over the several occasions
pl3 <- pl2 + geom_line(aes(group=Subject), colour="grey")
pl3
### Multiple variables on the same plot
#overlaying lines
ts1 <- ggplot(economics, aes(date))
ts2 <- ts1 + geom_line(aes(y=psavert, colour="psavert")) +
geom_line(aes(y=uempmed, colour="uempmed"))
# to omit the labeling of the Y axis
ts3 <- ts2 + ylab(" ")
# to adapt the coloring of the lines + add nice heading to the legend
ts4 <- ts3 + scale_color_manual(name="Variable",
values=c("green","blue"))
ts4
# save your output to a pdf file
plot1 <- ggplot(fish, aes(elv,log(hg))) +geom_point()
ggsave(file="output1.pdf", plot=plot1)
dev.off()
# save your output to a ps file
ggsave(file="output2.ps", plot=plot1)
dev.off()
# section 5:correlation and  multivariate scatter plot matrix
fish.num <- fish[,c(2,4,5,6)]
names(fish.num)
cor(fish.num)
pairs(fish.num)
#install.packages("GGally")
library(GGally)
ggpairs(fish.num)
fish$dam2 <- as.factor(fish$dam)
names(fish)
fish.num2 <- fish[,c(2,4,18)]
plot <- ggpairs(fish.num2,mapping = aes(color = dam2))
plot
# Exam Prep (2016)
library("diamonds")
ggplot2.diamonds
# Exam Prep (2016)
library("ggplot2")
?diamonds
head(diamonds, 5000)
diamonds_small <- head(diamonds, 5000)
diamonds_small.cut
diamonds_small$cut
ifelse(diamonds_small$cut=="Ideal"|"Premium","Above average","Below average")
ifelse(diamonds_small$cut=="Ideal"|diamonds_small$cut=="Premium","Above average","Below average")
?ifelse
cut_function <- function(x){
ifelse(x=="Ideal"|x=="Premium","Above average", ifelse(x=="Good"|x=="Fair","Below average",x))
}
cut_function(diamonds$cut)
ifelse(x=="Ideal"|x=="Premium","Above average", ifelse(x=="Good"|x=="Fair","Below average","Very Good"))
diamonds_small <- head(diamonds, 5000)
cut_function <- function(x){
ifelse(x=="Ideal"|x=="Premium","Above average", ifelse(x=="Good"|x=="Fair","Below average","Very Good"))
}
cut_function(diamonds$cut)
select(diamonds, carat, color, clarity, price)
head(diamonds)
head(diamonds_small)
select(diamonds_small, carat)
diamonds_small
diamonds_small$carat
library("dplyr")
select(diamonds_small, carat)
head(diamonds_small)
select(diamonds_small, carat, color, clarity, price)
# c)
diamonds_2 <- select(diamonds_small, carat, color, clarity, price)
cbind(diamonds_2, cut_new)
cut_new <- cut_function(diamonds$cut)
# c)
diamonds_2 <- select(diamonds_small, carat, color, clarity, price)
cut_new <- cut_function(diamonds$cut)
cbind(diamonds_2, cut_new)
cut_new <- cut_function(diamonds_small$cut)
# c)
diamonds_2 <- select(diamonds_small, carat, color, clarity, price)
cbind(diamonds_2, cut_new)
# c)
diamonds_2 <- cbind(select(diamonds_small, carat, color, clarity, price), cut_new)
head(diamonds_2)
source('~/.active-rstudio-document')
readLines('lowbwt.dat')
getwd
getwd()
setwd("~/low-birth-weight")
setwd("~/Documents/School - Masters 2/Statistical Methods for Bioinformatics/Part 1/Project/low-birth-weight")
readLine('lowbwt.dat')
source('~/Documents/School - Masters 2/Statistical Methods for Bioinformatics/Part 1/Project/low-birth-weight/Untitled.R')
source('~/Documents/School - Masters 2/Statistical Methods for Bioinformatics/Part 1/Project/low-birth-weight/Untitled.R')
source('~/Documents/School - Masters 2/Statistical Methods for Bioinformatics/Part 1/Project/low-birth-weight/Untitled.R')
read.table('lowbwt.dat')
birth.table <- read.table('lowbwt.dat')
birth.table
source('~/Documents/School - Masters 2/Statistical Methods for Bioinformatics/Part 1/Project/low-birth-weight/Untitled.R')
